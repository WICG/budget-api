<pre class='metadata'>
Title: Web Budget API
Shortname: budget-api
Level: 1
Status: DREAM
Group: wicg
URL: https://beverloo.github.io/budget-api/
Editor: Peter Beverloo, Google, peter@chromium.org
Abstract: This specification describes an API that can be used to retrieve the available budget an origin has available for resource intensive operations, as well as the cost associated with doing such an operation.
Repository: beverloo/budget-api
</pre>

<pre class="anchors">
spec: web-background-sync; urlPrefix: https://wicg.github.io/BackgroundSync/spec/
    type: dfn
        text: in the background; url: in-the-background
spec: push-api; urlPrefix: https://w3c.github.io/push-api/
    type: dfn
        text: push message; url: push-message
spec: html; urlPrefix: https://html.spec.whatwg.org/multipage/
    urlPrefix: browsers.html
        type: dfn
            text: origin; url: concept-origin
    urlPrefix: infrastructure.html
        type: dfn
            text: in parallel; url: in-parallel
    urlPrefix: webappapis.html
        type: dfn
            text: entry settings object; url: entry-settings-object
        type: interface
            text: Navigator; url: navigator
    urlPrefix: workers.html
        type: interface
            text: WorkerNavigator; url: workernavigator
spec: promises-guide; urlPrefix: https://www.w3.org/2001/tag/doc/promises-guide#
    type: dfn
        text: A new promise; url: a-new-promise
spec: webidl; urlPrefix: https://heycam.github.io/webidl/
    type: dfn
        text: DOMException; url: dfn-DOMException
    type: interface
        text: SecurityError; url: securityerror
        text: sequence; url: idl-sequence
</pre>

<section class="non-normative">
  <h2 id="introduction">Introduction</h2>
  <em>This section is non-normative.</em>
  <p>
    Web Applications have conventionally been able to execute code, make network requests and
    interact with the user by means of established interaction, usually through a browser tab. This
    has allowed users to associate the presence of a browser tab with the Web Application's ability
    ability to do work on their behalf.
  </p>
  <p>
    Following the introduction of the Push API [[PUSH-API]] and Web Background Synchronization
    [[WEB-BACKGROUND-SYNC]], this assumption no longer stands. Web Applications are now able to both
    trigger and schedule execution of code <a>in the background</a>, outside of the userâ€™s control.
  </p>
  <p>
    In an effort to mitigate risk to the user, user agents have implemented restrictions such as
    time limits on executing code <a>in the background</a>, or a requirement for the Web Application
    to use the Web Notification API [[NOTIFICATIONS]] to inform the user of the work they've done.
    Those restrictions are often unspecified and left up to the discretion of the user agent. In
    some cases, user agents will choose to not enforce these restrictions depending on the intensity
    of the <a lt="user engagement">user's engagement</a> with the Web Application.
  </p>
  <p>
    This specification describes an API that exposes a budget that can be used by authors to
    determine their available budget for resource intensive background operations, as well as the
    cost associated with doing a certain action <a>in the background</a>.
  </p>

  <section class="example">
    <p>
      Determine whether a user visible interaction is required in response to a <a>push message</a>:
    </p>
    <pre class="lang-js">
      self.addEventListener('push', event => {
        // Execute the application-specific logic depending on the contents of the
        // received push message, for example by caching the latest content.

        event.waitUntil(
            Promise.all([ navigator.getCost('push-message'), navigator.getBudget() ])
              .then(([cost, budget]) => {
                  if (budget >= cost)
                      return;  // No need to show a notification.

                  // Not enough budget is available, must show a notification.
                  return registration.showNotification(...);
              })
          );
      });
    </pre>
  </section>
  <p class="issue">
    Add an example that demonstrates a non-Push API use-case.
  </p>
  <p class="issue">
    Add an example that demonstrates a <code>getBudgetDetails()</code> use-case.
  </p>
</section>

<section>
  <h2 id="concepts">Concepts</h2>
  <p>
    The <dfn>user engagement</dfn> with an <a>origin</a> is defined by the intensity of their
    interaction with the application by means of navigation, interaction and retention signals.
  </p>
  <p>
    A <dfn>background operation</dfn> is the ability for an <a>origin</a> to execute potentially
    resource intensive code <a>in the background</a>.
  </p>
  <p>
    The <dfn>background operation cost</dfn> is a positive number that describes the cost of
    executing a <a>background operation</a> on the user's device.
  </p>
  <p>
    An <a>origin</a> has an associated <dfn>budget</dfn>, which is a positive number derived from
    the <a>user engagement</a> that describes how many <a>background operations</a> the
    <a>origin</a> is able to do, depending on the associated <a>background operation costs</a>.
  </p>
  <p>
    An <a>origin</a> may have an associated <dfn>list of budget predictions</dfn>. These are
    <a>budget</a> entries with a known expiration time that lies in the future.
  </p>
</section>

<section>
  <h2 id="privacy-considerations">Privacy Considerations</h2>

  <section>
    <h3 id="applicability">Applicability</h3>
    <p class="issue">
      Define that the intention is for this to be used for resource-sensitive operations (e.g.
      the Push API), not privacy-sensitive operations (e.g. Geolocation).
    </p>
  </section>

  <section>
    <h3 id="permissions">Permissions</h3>
    <p class="issue">
      Define that user agents may <em>(1)</em> offer the user means to override the budget available
      to a Web Application, and <em>(2)</em> the background operations themselves may be guarded
      behind additional permissions.
    </p>
  </section>
</section>

<section>
  <h2 id="api">API</h2>

  <section>
    <h3 id="navigator-budget-interface">The {{NavigatorBudget}} interface</h3>
    <p class="issue">
      Should these methods be exposed as part of a <code>navigator.budget</code> object?
    </p>
    <pre class="idl">
      [NoInterfaceObject,
       Exposed=(Window,Worker)]
      interface NavigatorBudget {
        Promise&lt;double&gt; getCost(ActionType type);
        Promise&lt;double&gt; getBudget();
        Promise&lt;sequence&lt;BudgetPrediction&gt;&gt; getBudgetDetails();
      };

      Navigator implements NavigatorBudget;
      WorkerNavigator implements NavigatorBudget;
    </pre>

    <p>
      The <code><dfn method for="NavigatorBudget" title="getCost()">getCost()</dfn></code> method
      returns a promise that will be resolved with the <a>background operation cost</a> of the
      indicated <a>background operation</a>.
    </p>
    <p class="note">
      A user agent could lower the cost of certain <a>background operations</a> if the user has
      established a trust relationship with the Web Application.
    </p>
    <p>
      When invoked, it MUST return <a>a new promise</a> <var>promise</var> and run the following
      steps <a>in parallel</a>:
    </p>
    <ol>
      <li>
        Resolve the <var>promise</var> with the <a>background operation cost</a> associated with
        the given <code>type</code>.
      </li>
    </ol>

    <p>
      The <code><dfn method for="NavigatorBudget" title="getBudget()">getBudget()</dfn></code>
      method returns a promise that will be resolved with the immediately available <a>budget</a>.
    </p>
    <p>
      When invoked, it MUST return <a>a new promise</a> <var>promise</var> and run the following
      steps <a>in parallel</a>:
    </p>
    <ol>
      <li>
        Let <var>origin</url> be the <a>entry settings object</a>'s <a>origin</a>.
      </li>
      <li>
        If the scheme of the <var>origin</var> is not <code>https</code>, reject <var>promise</var>
        with an {{SecurityError}} and terminate these steps.
      </li>
      <li>
        Resolve the <var>promise</var> with <var>origin</var>'s <a>budget</a> when set, or zero
        otherwise.
      </li>
    </ol>

    <p>
      The <code><dfn method for="NavigatorBudget" title="getBudgetDetails()">getBudgetDetails()</dfn>
      </code> method returns a promise that will be resolved with a sequence of {{BudgetPrediction}}
      objects sharing the immediately available and predictive <a>budget</a>.
    </p>
    <p class="issue">
      This is significantly underspecified, as it ties in to the concept of <em>how</em> a user
      agent maintains budget. Additionally, the term <em>predictive</em> is not firm enough: the
      values given by the promise should be guaranteed minimums.
    </p>
    <p>
      When invoked, it MUST return <a>a new promise</a> <var>promise</var> and run the following
      steps <a>in parallel</a>:
    </p>
    <ol>
      <li>
        Let <var>origin</url> be the <a>entry settings object</a>'s <a>origin</a>.
      </li>
      <li>
        If the scheme of the <var>origin</var> is not <code>https</code>, reject <var>promise</var>
        with an {{SecurityError}} and terminate these steps.
      </li>
      <li>
        Let <var>predictions</var> be a new {{sequence}}.
      </li>
      <li>
        For each <a>budget</a> entry in <var>origin</var>'s <a>list of budget predictions</a>:
        <ol>
          <li>
            Let <var>prediction</var> be a new {{BudgetPrediction}} instance.
          </li>
          <li>
            Set <var>prediction</var>'s {{budget}} attribute to the <a>budget</a> value.
          </li>
          <li>
            Set <var>prediction</var>'s {{expiration}} attribute to the DOMTimeStamp representing
            the final date of the validity of the <a>budget</a>.
          </li>
          <li>
            Add <var>prediction</var> to the <var>predictions</var> {{sequence}}.
          </li>
        </ol>
      </li>
      <li>
        Resolve the <var>promise</var> with <var>predictions</var>.
      </li>
    </ol>

  </section>

  <section>
    <h3 id="budget-prediction-interface">The {{BudgetPrediction}} interface</h3>
    <pre class="idl">
      [Exposed=(Window,Worker)]
      interface BudgetPrediction {
        readonly attribute double budget;
        readonly attribute DOMTimeStamp expiration;
      };
    </pre>

    <p>
      The <dfn attribute dfn-for="BudgetPrediction"><code>budget</code></dfn> attribute's getter
      must return the <a>budget</a> at the associated {{expiration}} time.
    </p>

    <p>
      The <dfn attribute dfn-for="BudgetPrediction"><code>expiration</code></dfn> attribute's getter
      must return the timestamp representing the time, in milliseconds since 00:00:00 UTC on 1
      January 1970, of the time the <a>budget</a> will expire.
    </p>
  </section>

  <section>
    <h3 id="action-type-enum">The {{ActionType}} enum</h3>
    <pre class="idl">
      enum ActionType { "push-message" };
    </pre>

    <p>
      The {{ActionType}} enumeration describes the known set of <a>background operations</a> that
      the Web Budget API is applicable for.
    </p>
    <ul>
      <li>
        The <code><dfn for="ActionType">push-message</dfn></code> value represents a <a>background
        operation</a> in response to an incoming push message through the Push API. [[!PUSH-API]]
      </li>
    </ul>

    <p class="issue">
      Should we strive for consistency with the Permissions API [[PERMISSIONS]] for these values?
    </p>
    <p class="note">
      Specifications are encouraged to extend the {{ActionType}} enumeration with their own values.
    </p>
  </section>
  
</section>
