<pre class='metadata'>
Title: Web Budget API
Shortname: budget-api
Level: 1
Status: DREAM
Group: wicg
URL: https://beverloo.github.io/budget-api/
Editor: Peter Beverloo, Google, peter@chromium.org
Abstract: This specification describes an API that can be used to retrieve the amount of budget an origin has available for resource consuming background operations, as well as the cost associated with doing such an operation.
Repository: beverloo/budget-api
</pre>

<pre class="anchors">
spec: web-background-sync; urlPrefix: https://wicg.github.io/BackgroundSync/spec/
    type: dfn
        text: in the background; url: in-the-background
spec: push-api; urlPrefix: https://w3c.github.io/push-api/
    type: dfn
        text: push message; url: push-message
spec: html; urlPrefix: https://html.spec.whatwg.org/multipage/
    urlPrefix: browsers.html
        type: dfn
            text: origin; url: concept-origin
    urlPrefix: infrastructure.html
        type: dfn
            text: document; url: document
            text: in parallel; url: in-parallel
    urlPrefix: webappapis.html
        type: dfn
            text: document environment; url: document-environment
            text: entry settings object; url: entry-settings-object
            text: worker environment; url: worker-environment
        type: interface
            text: Navigator; url: navigator
    urlPrefix: workers.html
        type: dfn
            text: worker; url: worker
        type: interface
            text: WorkerNavigator; url: workernavigator
spec: promises-guide; urlPrefix: https://www.w3.org/2001/tag/doc/promises-guide#
    type: dfn
        text: A new promise; url: a-new-promise
spec: webidl; urlPrefix: https://heycam.github.io/webidl/
    type: dfn
        text: DOMException; url: dfn-DOMException
    type: interface
        text: SecurityError; url: securityerror
        text: sequence; url: idl-sequence
</pre>

<section class="non-normative">
  <h2 id="introduction">Introduction</h2>
  <em>This section is non-normative.</em>
  <p>
    Web Applications have conventionally been able to execute code, make network requests and
    interact with the user by means of established interaction, usually through a browser tab. This
    has allowed users to associate the presence of a browser tab with the Web Application's ability
    ability to do work on their behalf.
  </p>
  <p>
    Following the introduction of the Push API [[PUSH-API]] and Web Background Synchronization
    [[WEB-BACKGROUND-SYNC]], this assumption no longer stands. Web Applications are now able to both
    trigger and schedule execution of code <a>in the background</a>, outside of the userâ€™s control.
  </p>
  <p>
    In an effort to mitigate risk to the user, user agents have implemented restrictions such as
    time limits on executing code <a>in the background</a>, or a requirement for the Web Application
    to use the Web Notification API [[NOTIFICATIONS]] to inform the user of the work they've done.
    Those restrictions are often unspecified and left up to the discretion of the user agent. In
    some cases, user agents will choose to not enforce these restrictions depending on the intensity
    of the <a lt="user engagement">user's engagement</a> with the Web Application.
  </p>
  <p>
    This specification describes an API that exposes a budget that can be used by authors to
    determine their available budget for resource intensive background operations, as well as the
    cost associated with doing a certain <a>background operation</a>.
  </p>
  <p>
    Because this API relates to the ability to do work <a>in the background</a>, which is considered
    a privilege, functionality provided by this API is only available in a <a>secure context</a>.
  </p>

  <p class="note">
    This specification does not define how user agents establish or store the amount of available
    <a>budget</a>. It aims to define an API that exposes sufficient information to make the
    <a>budget</a> useful for authors, while not restricting the implementation details and
    heuristics specific to a user agent.
  </p>

  <section>
    <h3 id="immediate-budget">Immediate budget</h3>
    <p>
      There are various use-cases for needing to know the immediately available <a>budget</a>:
    </p>
    <ul>
      <li>
        Deciding to <em>not</em> show a notification in response to a low priority push message
        whose primary purpose was to synchronize data.
      </li>
      <li>
        Deciding whether the <a>origin</a> can schedule a precise timer using a hypothetical Job
        Scheduler API.
      </li>
    </ul>

    <p>
      The API defines a <code>{{BudgetService/getBudget()}}</code> method that can be used with
      <code>{{BudgetService/getCost()}}</code> to satisfy these use-cases, in unison with other
      APIs they depend on. 
    </p>

    <section class="example">
      <p>
        Determine whether a user visible interaction is required in response to a <a>push message</a>:
      </p>
      <pre class="lang-js">
        self.addEventListener('push', event => {
            // Execute the application-specific logic depending on the contents of the
            // received push message, for example by caching the latest content.

            event.waitUntil(
              Promise.all([ navigator.getCost('push'), navigator.getBudget() ])
                .then(([cost, budget]) => {
                    if (budget >= cost)
                        return;  // No need to show a notification.

                    // Not enough budget is available, must show a notification.
                    return registration.showNotification(...);
                })
            );
        });
      </pre>
    </section>
  </section>

  <section>
    <h3 id="expected-budget">Expected budget</h3>
    <p>
      There are various use-cases for needing to know the <a>budget</a> in advance:
    </p>
    <ul>
      <li>
        Deciding on the frequency of server-initiated cache updates of synchronized data.
      </li>
      <li>
        Deciding whether there is sufficient <a>budget</a> available to hide previously shown
        notifications when the user dismissed them on other devices.
      </li>
      <li>
        Deciding to temporarily limit <a>background operations</a> if the <a>budget</a> could be
        used during an upcoming sporting event instead. 
      </li>
    </ul>

    <p>
      The API defines a <code>{{BudgetService/getBudget()}}</code> method that can be used
      with <code>{{BudgetService/getCost()}}</code> to satisfy these use-cases, in unison with
      other APIs they depend on.
    </p>

    <p class="note">
      User agents that do not store expected budget would return a single
      <code>{{BudgetState}}</code> entry with an expiration date set to the current time.
    </p>

    <p class="issue">
      Add an example that demonstrates a <code>getBudget()</code> use-case.
    </p>
    <p class="issue">
      Update the introduction following yesterday's discussion.
    </p>
  </section>
</section>

<section>
  <h2 id="concepts">Concepts</h2>
  <p>
    The <dfn>user engagement</dfn> with an <a>origin</a> is defined by the intensity of their
    interaction with the application by means of navigation, interaction and retention signals.
  </p>
  <p>
    A <dfn>background operation</dfn> is the ability for an <a>origin</a> to execute potentially
    resource intensive code <a>in the background</a>.
  </p>
  <p>
    The <dfn>background operation cost</dfn> is a positive number that describes the cost of
    executing a <a>background operation</a> on the user's device.
  </p>
  <p>
    An <a>origin</a> has an associated <dfn>budget</dfn>, which is a positive number derived from
    the <a>user engagement</a> that describes how many <a>background operations</a> the
    <a>origin</a> is able to do, depending on the associated <a>background operation costs</a>.
  </p>
  <p>
    An <a>origin</a> may have an associated <dfn>list of budget expectations</dfn>. These are the
    expected <a>budget</a> values at given moments in time in the future.
  </p>
</section>

<section>
  <h2 id="privacy-considerations">Privacy Considerations</h2>

  <section>
    <h3 id="applicability">Applicability</h3>
    <p class="issue">
      Define that the intention is for this to be used for resource-sensitive operations (e.g.
      the Push API), not privacy-sensitive operations (e.g. Geolocation).
    </p>
  </section>

  <section>
    <h3 id="permissions">Permissions</h3>
    <p class="issue">
      Define that user agents may <em>(1)</em> offer the user means to override the budget available
      to a Web Application, and <em>(2)</em> the background operations themselves may be guarded
      behind additional permissions.
    </p>
  </section>
</section>

<section>
  <h2 id="api">API</h2>

  <section>
    <h3 id="navigator-budget-interface">The {{NavigatorBudget}} interface</h3>
    <pre class="idl">
      [NoInterfaceObject,
       Exposed=(Window,Worker)]
      interface NavigatorBudget {
          readonly attribute BudgetService budget;
      };

      Navigator implements NavigatorBudget;
      WorkerNavigator implements NavigatorBudget;
    </pre>

    <p>
      The <dfn attribute dfn-for="NavigatorBudget"><code>budget</code></dfn> attribute's getter must
      return a {{BudgetService}} scoped to the <a>entry settings object</a>'s <var>origin</var>.
    </p>
  </section>

  <section>
    <h3 id="budget-service-interface">The {{BudgetService}} interface</h3>
    <p>
      The {{BudgetService}} interface represents the programmatic interface to the user agent's
      budget service. It is available in both <a lt="document environment">document</a> and
      <a>worker environments</a>.
    </p>

    <pre class="idl">
      [Exposed=(Window,Worker)]
      interface BudgetService {
          Promise&lt;double&gt; getCost(OperationType operation);
          Promise&lt;sequence&lt;BudgetState&gt;&gt; getBudget();
      };
    </pre>

    <p>
      The <code><dfn method for="BudgetService" title="getCost()">getCost()</dfn></code> method
      returns a promise that will be resolved with the worst-case <a>background operation cost</a>
      of the indicated <a>background operation</a>.
    </p>
    <p>
      When invoked, it MUST return <a>a new promise</a> <var>promise</var> and run the following
      steps <a>in parallel</a>:
    </p>
    <ol>
      <li>
        Resolve the <var>promise</var> with the worst-case <a>background operation cost</a>
        associated with the given <code>operation</code>.
      </li>
    </ol>

    <p>
      The <code><dfn method for="BudgetService" title="getBudget()">getBudget()</dfn></code> method
      returns a promise that will be resolved with a sequence of {{BudgetState}} objects indicating
      the expected state of the budget at given times in the future.
    </p>
    <p>
      When invoked, it MUST return <a>a new promise</a> <var>promise</var> and run the following
      steps <a>in parallel</a>:
    </p>
    <ol>
      <li>
        Let <var>origin</var> be the <a>entry settings object</a>'s <a>origin</a>.
      </li>
      <li>
        If the scheme of the <var>origin</var> is not <code>https</code>, reject <var>promise</var>
        with an {{SecurityError}} and terminate these steps.
      </li>
      <li>
        Let <var>details</var> be a new {{sequence}}.
      </li>
      <li>
        For each <a>budget</a> entry in <var>origin</var>'s <a>list of budget expectations</a>:
        <ol>
          <li>
            Let <var>state</var> be a new {{BudgetState}} instance.
          </li>
          <li>
            Set <var>state</var>'s {{BudgetState/budget}} attribute to the <a>budget</a> value.
          </li>
          <li>
            Set <var>state</var>'s {{expiration}} attribute to the DOMTimeStamp representing
            the final date of the validity of the <a>budget</a>.
          </li>
          <li>
            Add <var>state</var> to the <var>details</var> {{sequence}}.
          </li>
        </ol>
      </li>
      <li>
        Resolve the <var>promise</var> with <var>details</var>.
      </li>
    </ol>


    <!-- ------------------------------------- -->

    <p class="note">
      The claimed cost of a certain <a>background operations</a> could be less than the cost
      indicated by {{BudgetService/getCost()}} when the user's device is in favorable conditions,
      for example because it's not on battery power.
    </p>

    <!-- ------------------------------------- -->
  </section>

  <section>
    <h3 id="budget-state-interface">The {{BudgetState}} interface</h3>
    <p>
      The {{BudgetState}} interface represents the known minimum amount of <a>budget</a> available
      at a specific point in the future. This enables authors to make near-term decisions about how
      to spend their <a>budget</a>.
    </p>

    <pre class="idl">
      [Exposed=(Window,Worker)]
      interface BudgetState {
        readonly attribute double budget;
        readonly attribute DOMTimeStamp expirationTime;
      };
    </pre>

    <p>
      The <dfn attribute dfn-for="BudgetState"><code>budget</code></dfn> attribute's getter must
      return the <a>budget</a> at the associated <code>{{BudgetState/expiration}}</code> time.
    </p>

    <p>
      The <dfn attribute dfn-for="BudgetState"><code>expiration</code></dfn> attribute's getter must
      return the timestamp representing the time, in milliseconds since 00:00:00 UTC on 1 January
      1970, of the time the <a>budget</a> will expire.
    </p>
  </section>

  <section>
    <h3 id="oepration-type-enum">The {{OperationType}} enum</h3>
    <p>
      The <code>{{OperationType}}</code> enumeration describes the known set of <a>background
      operations</a> that the Web Budget API caters for. Authors can use this in combination with
      {{BudgetService/getCost()}} to interpret their available <a>budget</a> as a quantifiable set
      of <a>background operations</a> it can be used for.
    </p>

    <pre class="idl">
      enum OperationType {
        "push"
      };
    </pre>

    <p>
      The following <code>{{OperationType}}</code> values are defined:
    </p>
    <ul>
      <li>
        The <code><dfn for="OperationType">push</dfn></code> value represents a <a>background
        operation</a> in response to an incoming push message through the Push API. [[!PUSH-API]]
      </li>
    </ul>

    <p class="note">
      Specifications are encouraged to extend the {{OperationType}} enumeration with their own
      values. Naming consistency with the Permission API [[PERMISSIONS]], when applicable, is
      recommended.
    </p>
  </section>
  
</section>
